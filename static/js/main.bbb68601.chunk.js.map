{"version":3,"sources":["components/DogCard/index.js","components/Title/index.js","components/Wrapper/index.js","components/Score/index.js","App.js","index.js"],"names":["DogCard","props","className","alt","name","src","image","id","onClick","shuffledDog","Title","children","Wrapper","Score","status","score","goal","App","state","dogs","clickedId","includes","setState","push","count","length","temp","index","ctr","Math","floor","random","this","map","dog","key","Component","ReactDOM","render","document","getElementById"],"mappings":"8nCAaeA,G,MAVC,SAAAC,GAAK,OACjB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,uBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAClDC,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMM,KAAKL,UAAU,gB,MCA/CQ,MAJf,SAAeT,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMU,W,MCGvBC,MAJf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,aCO1BE,MARf,SAAeZ,GACb,OAAO,wBAAIC,UAAU,aACnB,wBAAIA,UAAU,UAAd,WAAgCD,EAAMa,QACtC,wBAAIZ,UAAU,SAAd,UAA8BD,EAAMc,OACpC,wBAAIb,UAAU,QAAd,SAA4BD,EAAMe,QCqEvBC,E,4MAnEbC,MAAQ,CACNC,OACAC,UAAW,GACXL,MAAO,EACPC,KAAM,EACNF,OAAQ,I,EAOVL,YAAc,SAAAF,GAEZ,IAAIa,EAAY,EAAKF,MAAME,UAE3B,GAAIA,EAAUC,SAASd,GACrB,EAAKe,SAAS,CAAEF,UAAW,GAAIL,MAAO,EAAGD,OAAQ,4CASjD,GALA,EAAKQ,SAAS,CAAER,OAAQ,2BACxBM,EAAUG,KAAKhB,GAEf,EAAKe,SAAS,CAAEP,MAAO,EAAKG,MAAMM,MAAQ,IAEtCJ,EAAUK,SAAW,EAAKP,MAAMF,KAApC,CAKA,EAAKM,SAAS,CAAEH,OAAMC,YAAWL,MAAOK,EAAUK,SAGlD,IADA,IAAuBC,EAAMC,EAAzBC,EAAMT,EAAKM,OACRG,EAAM,GACXD,EAAQE,KAAKC,MAAMD,KAAKE,SAAWH,GACnCA,IACAF,EAAOP,EAAKS,GACZT,EAAKS,GAAOT,EAAKQ,GACjBR,EAAKQ,GAASD,OAZd,EAAKJ,SAAS,CAAER,OAAQ,UAAWM,UAAW,M,kEAlBlDY,KAAKV,SAAS,CAAER,OAAQ,8B,+BAmChB,IAAD,OAEP,OACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CACEE,KAAMgB,KAAKd,MAAMF,KACjBF,OAAQkB,KAAKd,MAAMJ,OACnBC,MAAOiB,KAAKd,MAAMH,QAElB,kBAAC,EAAD,oBACCiB,KAAKd,MAAMC,KAAKc,KAAI,SAAAC,GAAG,OACtB,kBAAC,EAAD,CACEzB,YAAa,EAAKA,YAClBF,GAAI2B,EAAI3B,GACR4B,IAAKD,EAAI3B,GACTD,MAAO4B,EAAI5B,gB,GA7DL8B,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.bbb68601.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst DogCard = props => (\n    <div className=\"card\">\n      <div className=\"img-container hover\">\n        <img alt={props.name} src={props.image} id={props.id} \n        onClick={() => props.shuffledDog(props.id)} className=\"shuffle\"/>\n      </div>\n\n    </div>\n);\n\nexport default DogCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return <h1 className=\"gameScore\">\n    <h3 className=\"status\">Status: {props.status}</h3>\n    <h3 className=\"score\">Score: {props.score}</h3>\n    <h3 className=\"goal\">Goal: {props.goal}</h3>\n    </h1>\n};\n\nexport default Score;","import React, { Component } from 'react';\nimport DogCard from \"./components/DogCard\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport dogs from \"./dogs.json\";\nimport Score from \"./components/Score\";\n\nclass App extends Component {\n\n  state = {\n    dogs,\n    clickedId: [],\n    score: 0,\n    goal: 5,\n    status: \"\"\n  };\n\n  componentDidMount() {\n    this.setState({ status: \"Click an image to begin\"})\n  }\n\n  shuffledDog = id => {\n\n    let clickedId = this.state.clickedId;\n\n    if (clickedId.includes(id)) {\n      this.setState({ clickedId: [], score: 0, status: \"You guessed incorrectly! Game Over\" });\n      return;\n    }\n    else {\n      this.setState({ status: \"You guessed correctly!\"})\n      clickedId.push(id);\n\n      this.setState({ score: this.state.count + 1 })\n\n      if (clickedId.length === this.state.goal) {\n        this.setState({ status: \"You Won\", clickedId: [] });\n        return;\n      }\n\n      this.setState({ dogs, clickedId, score: clickedId.length });\n\n      let ctr = dogs.length, temp, index;\n      while (ctr > 0) {\n        index = Math.floor(Math.random() * ctr);\n        ctr--;\n        temp = dogs[ctr];\n        dogs[ctr] = dogs[index];\n        dogs[index] = temp;\n      }\n    }\n  }\n\n  render() {\n\n    return (\n      <Wrapper>\n      <Score\n        goal={this.state.goal}\n        status={this.state.status}\n        score={this.state.score}\n      />\n        <Title>Clicky Game</Title>\n        {this.state.dogs.map(dog =>\n          <DogCard\n            shuffledDog={this.shuffledDog}\n            id={dog.id}\n            key={dog.id}\n            image={dog.image}\n          />\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}